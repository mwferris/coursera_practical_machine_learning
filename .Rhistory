require(datasets)
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Regression Models/quiz3.r')
?load
load(mtcars)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficient
fit1 <- lm(mpg ~ as.factor(cyl), data = mtcars)
summary(fit1)$coef[3]
summary(fit)$coef[3]
head(mtcars)
summary(mtcars)
str(mtcars)
fit_inter <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit, fit_inter, test = "Chisq")
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4
I?
d
?I
?mtcars
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
install.packages("caret")
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(caret)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(testing)
View(training)
?createDataPartition
rm(list=ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
?cut2
summary(training)
head(concrete)
qplot(mixtures ~ .)
head(mixtures)
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(gridExtra))
training <- mutate(training, index=1:nrow(training))
cutIndex <- cut2(training$index, g=10)
breaks <- 10
#byCement <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
#byBlastFurnaceSlag <- qplot(index, CompressiveStrength, data=training, color=cut2(training$BlastFurnaceSlag, g=breaks))
#byFlyAsh <- qplot(index, CompressiveStrength, data=training, color=cut2(training$FlyAsh, g=breaks))
#byWater <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Water, g=breaks))
#bySuperplasticizer <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Superplasticizer, g=breaks))
#byCoarseAggregate <- qplot(index, CompressiveStrength, data=training, color=cut2(training$CoarseAggregate, g=breaks))
#byFineAggregate <- qplot(index, CompressiveStrength, data=training, color=cut2(training$FineAggregate, g=breaks))
#byAge <- qplot(index, CompressiveStrength, data=training, color=cut2(training$Age, g=breaks))
#grid.arrange(byCement, byBlastFurnaceSlag, byFlyAsh, byWater, bySuperplasticizer, byCoarseAggregate, byFineAggregate, byAge)
qplot(index, CompressiveStrength, data=training, color=cut2(training$Cement, g=breaks))
clear
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret
)
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
head(segmentationOriginal)
str(segmentationOriginal)
?createDataPartition
?rpart
?AppliedStatisticalModeling
?segmentationOriginal
?rpart
?train
#question 1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#separate the datausing standard data frame methods
trainSet <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testSet <- segmentationOriginal[segmentationOriginal$Case == "Test",]
#set seed to 125 and fit a CART model with the rpart method using all predictor variables and default caret settings
set.seed(125)
fit1 <- rpart(Class ~., data=trainSet)
?rpart
?caret
library(caret)
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Intro to Machine Learning/quiz3.R')
library(e1071)
install.packages("e1071")
library(e1071)
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Intro to Machine Learning/quiz3.R')
fit
fit1
summary(fit1)
fancyRpartPlot(fit1)
fancyRpartPlot(fit1$finalModel)
fit1$finalModel
?fancyRpartPlot
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Intro to Machine Learning/quiz3.R')
install.packages("rpart")
install.packages("rpart")
?fancyRpartPlot
install.packages("fancyRpartPlot")
install.packages(rattle)
install.packages("rattle")
fancyRpartPlot(fit1$finalModel)
library(rattle)
fancyRpartPlot(fit1$finalModel)
?fancyRpartPlot
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Intro to Machine Learning/quiz3.R')
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Practical Machine Learning/Prediction Assignment Writeup/activityprediction.R')
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Practical Machine Learning/Prediction Assignment Writeup/activityprediction.R')
?download.file
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Practical Machine Learning/Prediction Assignment Writeup/activityprediction.R')
setwd("C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Practical Machine Learning/Prediction Assignment Writeup")
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Practical Machine Learning/Prediction Assignment Writeup/activityprediction.R')
